# Generated by Django 4.2 on 2025-09-23 15:02

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('services', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_date', models.DateField(help_text='Date of appointment')),
                ('period', models.CharField(choices=[('AM', 'Morning'), ('PM', 'Afternoon')], help_text='Morning or Afternoon', max_length=2)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled'), ('did_not_arrive', 'Did Not Arrive'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('patient_type', models.CharField(choices=[('new', 'New Patient'), ('returning', 'Returning Patient')], default='returning', max_length=10)),
                ('reason', models.TextField(blank=True)),
                ('temp_first_name', models.CharField(blank=True, help_text='Temporary storage for pending requests', max_length=100)),
                ('temp_last_name', models.CharField(blank=True, help_text='Temporary storage for pending requests', max_length=100)),
                ('temp_email', models.EmailField(blank=True, help_text='Temporary storage for pending requests', max_length=254)),
                ('temp_contact_number', models.CharField(blank=True, help_text='Temporary storage for pending requests', max_length=20)),
                ('temp_address', models.TextField(blank=True, help_text='Temporary storage for pending requests')),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('symptoms', models.TextField(blank=True, help_text='Patient symptoms and complaints')),
                ('procedures', models.TextField(blank=True, help_text='Procedures performed during appointment')),
                ('diagnosis', models.TextField(blank=True, help_text='Diagnosis and treatment notes')),
                ('staff_notes', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='DailySlots',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True)),
                ('am_slots', models.PositiveIntegerField(default=6, help_text='Available morning slots (AM)')),
                ('pm_slots', models.PositiveIntegerField(default=8, help_text='Available afternoon slots (PM)')),
                ('notes', models.TextField(blank=True, help_text='Optional notes for this date')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Daily Slot',
                'verbose_name_plural': 'Daily Slots',
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_amount', models.DecimalField(decimal_places=2, default=0, help_text='Total bill amount', max_digits=10)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=0, help_text='Total amount paid so far', max_digits=10)),
                ('payment_type', models.CharField(choices=[('full', 'Full Payment'), ('installment', 'Installment')], default='full', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('partially_paid', 'Partially Paid'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('installment_months', models.PositiveIntegerField(blank=True, help_text='Number of months for installment', null=True)),
                ('monthly_amount', models.DecimalField(decimal_places=2, default=0, help_text='Monthly installment amount', max_digits=10)),
                ('next_due_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, help_text='Optional notes about payment')),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='appointments.appointment')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_date', models.DateField()),
                ('payment_datetime', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
                ('receipt_number', models.CharField(blank=True, max_length=50, unique=True)),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='appointments.payment')),
            ],
            options={
                'ordering': ['-payment_datetime'],
            },
        ),
        migrations.CreateModel(
            name='PaymentItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit (must be within service price range)', max_digits=10)),
                ('notes', models.TextField(blank=True)),
                ('discount', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='services.discount')),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='appointments.payment')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='services.service')),
            ],
        ),
    ]
